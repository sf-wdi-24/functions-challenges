# Functions Challenges

Evening challenges for the functions module.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MaxOrMin(num1, num2, max)
Define a function ```maxOrMin``` that takes three parameters: two numbers and a boolean.  Have it return the larger of the two numbers if the boolean is true, otherwise have it return the lesser of the numbers.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function maxOrMin(numbA, numbB, boo) {
	if ( boo === true) {
		return Math.max(numbA, numbB);
	} else {
		return Math.min(numbA, numbB)
	}
}
maxOrMin(81, 10, true);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
### sillySum(arr)
Write a function that takes an array of numbers and returns the sum of each number multiplied by its index.
```count += (number * index)```
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

arr = [2, 5, 8, 9]

function sillySum(arr) {
	var count = null;
	for(var i = 0; i < arr.length; i++){
	count += (i *arr[i]);
	}
	return count;
}

sillySum(arr); 

<!-- ======> 48  -->

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
### numSquare(max)
Create a function called numSquare that will return an array of all perfect square numbers up to, but not exceeding a max number.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function numSquare(max) {
    var newArray = []; 

	for (var i = 0; i < max; i++) {
    	if (i * i <= max) {
     	newArray.push(i*i);
    	}
	}
    return newArray; 
}
numSquare(101);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
### isPrime(num)
Create a function that returns true if the number passed in is a prime number and false if not.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function isPrime(num) {
	for(var x = 2, x < num; x++){
		if (num % x === 0) {
		return false
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
### primes(max)
Using your isPrime function, create a function primes that will return an array of all prime numbers up to, but not exceeding a max number.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<!-- //This returns an array with the proper amount of elements, but doesn't record the element values themselves; they are undefined. Needs a little help, but is so close. -->
function isPrime(num) {					
	for(var i = 2; i < num; i++){
		if (num % i === 0) {
		return false;
		}
	}
}
function primes(maxNum) {
    var primeArray = []; 
	for (var i = 2; i < maxNum; i++) {
    if (i * i <= maxNum) {
        primeArray.push(isPrime(num));
    }
}
    return primeArray; 
}
primes(49);   